NewMacro selectFrequenciesMirror()

int Ncatalog = 15;



real[int] nso(Ncatalog);
nso = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29];


real[int] nse(Ncatalog);
nse = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30];

real[int] nsall(2*Ncatalog);
nsall = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,
16,17,18,19,20,21,22,23,24,25,26,27,28,29,30];

if (meshChoice==3){
  Ncatalog = 2*Ncatalog;
}
if (meshChoice==5){
  Ncatalog = 2*Ncatalog;
}

real[int] ns(Ncatalog);

for (int nf = 0; nf < Ncatalog; nf++){
  if ((meshChoice==3)||(meshChoice==4)||(meshChoice==5)){
    ns[nf] = nsall[nf];
  }
  else {
    if (symChoice==1){
      ns[nf] = nso[nf];
    }
    else {
      ns[nf] = nse[nf];
    }
  }
}


func int idMinFreq(){
  int count = 0;
  real minN = (L-b)*minFrequency/pi;
  for (int nf = 0; nf < Ncatalog; nf++){
    if (ns[nf] < minN){
      count++;
    }
  }
  return count;
}

func int idMaxFreq(){
  int count = -1;
  real maxN = (L-b)*maxFrequency/pi;
  for (int nf = 0; nf < Ncatalog-1; nf++){
    if (ns[nf] <= maxN){
      count++;
    }
  }
  return count;
}

int i1 = idMinFreq();
int i2 = idMaxFreq();
nFreq = i2 - i1 + 1;

for (int nf = 0; nf < nFreq; nf++){
  ks[nf] = ns[nf+i1]*pi/(L-b);
}



EndMacro
