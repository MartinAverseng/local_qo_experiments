
NewMacro solveBestApprox()

  fespace Uh(ThBA,Pk);

  macro VarfH(varfName, meshName, PhName)
  varf varfName(u,v) =
  intN(meshName,dom,qforder=qfO)(dx(u)*dx(v) + dy(u)*dy(v)+k^2*u*v)
  + intN(meshName,near,qforder=qfO)(dx(u)*dx(v) + dy(u)*dy(v)+k^2*u*v)
  + intN(meshName,far,qforder=qfO)(dx(u)*dx(v) + dy(u)*dy(v)+k^2*u*v)
  + intN(meshName,dom,qforder=qfO)(dxfL2*dx(v) + dyfL2*dy(v)+k^2*fL2*v)
  + intN(meshName,near,qforder=qfO)(dxfL2*dx(v) + dyfL2*dy(v)+k^2*fL2*v)
  + intN(meshName,far,qforder=qfO)(dxfL2*dx(v) + dyfL2*dy(v)+k^2*fL2*v)
  + on(lobj,u=0);// EOM
  // for the preconditioner
  macro VarfOpt(varfName, meshName, PhName)
  varf varfName(u,v) =
  intN(meshName,dom,qforder=qfO)(dx(u)*dx(v) + dy(u)*dy(v)+k^2*u*v)
  + intN(meshName,near,qforder=qfO)(dx(u)*dx(v) + dy(u)*dy(v)+k^2*u*v)
  + intN(meshName,far,qforder=qfO)(dx(u)*dx(v) + dy(u)*dy(v)+k^2*u*v)
  + intN(meshName,dom,qforder=qfO)(dxfL2*dx(v) + dyfL2*dy(v)+k^2*fL2*v)
  + intN(meshName,near,qforder=qfO)(dxfL2*dx(v) + dyfL2*dy(v)+k^2*fL2*v)
  + intN(meshName,far,qforder=qfO)(dxfL2*dx(v) + dyfL2*dy(v)+k^2*fL2*v)
  - intbN(meshName,ffddminterfacelabel)(1i*k*u*v)
  + on(lobj,u=0);// EOM


  vsym = 0;
  vtgv = -1;
  vtgvelim =-1;

  ffddmbuildDmesh(MCoarse,ThBA,mpiCommWorld)

  ffddmbuildDfespace(FeCoarse,MCoarse,complex,def,init,Pk)

  ffddmbuildDfespace(Fe,M,complex,def,init,Pkref)

  ffddmsetupOperator(PBCoarse,FeCoarse,VarfH)


  ffddmset(PBCoarse,verbosity,1);
  ffddmsetup(PBCoarse,FeCoarse,VarfH,VarfOpt)
  //
  // ffddmsetupPrecond(PBCoarse,VarfOpt)
  // ffddmsetupPrecond(PB,VarfOpt)


  FeCoarseVhi<complex> u, rhs, x0;

  ffddmbuildrhs(PBCoarse,VarfH,rhs[]);

  x0 = 0;

  print("Solving scattering problem...");
  u[] = PBCoarsefGMRES(x0[], rhs[], 1.e-6, 100, "right");
  print("Done !");
EndMacro
